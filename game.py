{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 1.9.4\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 1.9.4\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    },
    {
     "ename": "error",
     "evalue": "display Surface quit",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-8123da6e6c8f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m     \u001b[0;31m#clear the screen before drawing it again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 165\u001b[0;31m     \u001b[0mscreen\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    166\u001b[0m     \u001b[0;31m#draw the screen elements\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31merror\u001b[0m: display Surface quit"
     ]
    }
   ],
   "source": [
    "import pygame\n",
    "import pyganim\n",
    "import math\n",
    "import time\n",
    "import random\n",
    "import os\n",
    "from pygame.locals import *\n",
    "\n",
    "#Initialize the game\n",
    "os.environ['SDL_VIDEO_CENTERED'] = '1'\n",
    "pygame.init()\n",
    "pygame.mixer.init()\n",
    "\n",
    "width, height = 640, 480\n",
    "\n",
    "screen=pygame.display.set_mode((width, height))\n",
    "keys = [False, False, False, False,False]\n",
    "\n",
    "acc=[0,0]\n",
    "laserbullets=[]\n",
    "badguys=[]\n",
    "badguys2=[]\n",
    "playerpos=[350,217]\n",
    "rocketypos = 160\n",
    "badtimer=1000\n",
    "badtimer2=1500\n",
    "badtimer1=0\n",
    "badtimer12=0\n",
    "badmaxtime=500\n",
    "badmaxtime2=500\n",
    "healthvalue=194\n",
    "rocketlaunch = False\n",
    "rocketsound = True\n",
    "player_shoot = False\n",
    "countdown1 = True\n",
    "countdown2 = True\n",
    "countdown3 = True\n",
    "player_facing = \"RIGHT\"\n",
    "player_move = \" \"\n",
    "    \n",
    "#Load images\n",
    "rocket = pygame.image.load(\"resources/images/rocket.png\")\n",
    "rocketl = pygame.image.load(\"resources/images/rocketl.png\")\n",
    "lbullet = pygame.image.load(\"resources/images/bullet.png\")\n",
    "grass = pygame.image.load(\"resources/images/grass.png\")\n",
    "sky = pygame.image.load(\"resources/images/sky.png\")\n",
    "healthbar = pygame.image.load(\"resources/images/healthbar.png\")\n",
    "health = pygame.image.load(\"resources/images/health.png\")\n",
    "gameover = pygame.image.load(\"resources/images/gameover.png\")\n",
    "youwin = pygame.image.load(\"resources/images/youwin.png\")\n",
    "\n",
    "player = pygame.image.load(\"resources/images/idle.png\")\n",
    "player2 = pygame.image.load(\"resources/images/idle2.png\")\n",
    "player3 = pygame.image.load(\"resources/images/idle3.png\")\n",
    "player4 = pygame.image.load(\"resources/images/idle4.png\")\n",
    "player5 = pygame.image.load(\"resources/images/idle5.png\")\n",
    "player6 = pygame.image.load(\"resources/images/idle6.png\")\n",
    "player7 = pygame.image.load(\"resources/images/idle7.png\")\n",
    "player8 = pygame.image.load(\"resources/images/idle8.png\")\n",
    "\n",
    "move1 = pygame.image.load(\"resources/images/move1.png\")\n",
    "move2 = pygame.image.load(\"resources/images/move2.png\")\n",
    "move3 = pygame.image.load(\"resources/images/move3.png\")\n",
    "move4 = pygame.image.load(\"resources/images/move4.png\")\n",
    "move5 = pygame.image.load(\"resources/images/move5.png\")\n",
    "move6 = pygame.image.load(\"resources/images/move6.png\")\n",
    "\n",
    "shoot1 = pygame.image.load(\"resources/images/shoot1.png\")\n",
    "shoot2 = pygame.image.load(\"resources/images/shoot2.png\")\n",
    "shoot3 = pygame.image.load(\"resources/images/shoot3.png\")\n",
    "\n",
    "bgm1 = pygame.image.load(\"resources/images/bgm1.png\")\n",
    "bgm2 = pygame.image.load(\"resources/images/bgm2.png\")\n",
    "bgm3 = pygame.image.load(\"resources/images/bgm3.png\")\n",
    "bgm4 = pygame.image.load(\"resources/images/bgm4.png\")\n",
    "bgm5 = pygame.image.load(\"resources/images/bgm5.png\")\n",
    "bgm6 = pygame.image.load(\"resources/images/bgm6.png\")\n",
    "bgm7 = pygame.image.load(\"resources/images/bgm7.png\")\n",
    "bgm8 = pygame.image.load(\"resources/images/bgm8.png\")\n",
    "\n",
    "#Flip images\n",
    "playerf = pygame.transform.flip(player, True, False)\n",
    "player2f = pygame.transform.flip(player2, True, False)\n",
    "player3f = pygame.transform.flip(player3, True, False)\n",
    "player4f = pygame.transform.flip(player4, True, False)\n",
    "player5f = pygame.transform.flip(player5, True, False)\n",
    "player6f = pygame.transform.flip(player6, True, False)\n",
    "player7f = pygame.transform.flip(player7, True, False)\n",
    "player8f = pygame.transform.flip(player8, True, False)\n",
    "\n",
    "move1f = pygame.transform.flip(move1, True, False)\n",
    "move2f = pygame.transform.flip(move2, True, False)\n",
    "move3f = pygame.transform.flip(move3, True, False)\n",
    "move4f = pygame.transform.flip(move4, True, False)\n",
    "move5f = pygame.transform.flip(move5, True, False)\n",
    "move6f = pygame.transform.flip(move6, True, False)\n",
    "\n",
    "shoot1f = pygame.transform.flip(shoot1, True, False)\n",
    "shoot2f = pygame.transform.flip(shoot2, True, False)\n",
    "shoot3f = pygame.transform.flip(shoot3, True, False)\n",
    "\n",
    "bgm1f = pygame.transform.flip(bgm1, True, False)\n",
    "bgm2f = pygame.transform.flip(bgm2, True, False)\n",
    "bgm3f = pygame.transform.flip(bgm3, True, False)\n",
    "bgm4f = pygame.transform.flip(bgm4, True, False)\n",
    "bgm5f = pygame.transform.flip(bgm5, True, False)\n",
    "bgm6f = pygame.transform.flip(bgm6, True, False)\n",
    "bgm7f = pygame.transform.flip(bgm7, True, False)\n",
    "bgm8f = pygame.transform.flip(bgm8, True, False)\n",
    "\n",
    "#initialize animation\n",
    "boltAnim = pyganim.PygAnimation([(player, 150),(player2, 150),(player3, 150),(player4, 150)\n",
    "                                ,(player5, 150),(player6, 150),(player7, 150),(player8, 150)])\n",
    "\n",
    "boltAnimf = pyganim.PygAnimation([(playerf, 150),(player2f, 150),(player3f, 150),(player4f, 150)\n",
    "                                ,(player5f, 150),(player6f, 150),(player7f, 150),(player8f, 150)])\n",
    "\n",
    "boltAnim_m = pyganim.PygAnimation([(move1, 150),(move2, 150),(move3, 150),(move4, 150),(move5, 150),(move6, 150)])\n",
    "boltAnim_mf = pyganim.PygAnimation([(move1f, 150),(move2f, 150),(move3f, 150),(move4f, 150),(move5f, 150),(move6f, 150)])\n",
    "\n",
    "boltAnim_s = pyganim.PygAnimation([(shoot1, 150),(shoot2, 150),(shoot3, 150)])\n",
    "boltAnim_sf = pyganim.PygAnimation([(shoot1f, 150),(shoot2f, 150),(shoot3f, 150)])\n",
    "\n",
    "boltAnim_bg = pyganim.PygAnimation([(bgm1, 150),(bgm2, 150),(bgm3, 150),(bgm4, 150)\n",
    "                                ,(bgm5, 150),(bgm6, 150),(bgm7, 150),(bgm8, 150)])\n",
    "\n",
    "boltAnim_bgf = pyganim.PygAnimation([(bgm1f, 150),(bgm2f, 150),(bgm3f, 150),(bgm4f, 150)\n",
    "                                ,(bgm5f, 150),(bgm6f, 150),(bgm7f, 150),(bgm8f, 150)])\n",
    "boltAnim.play()\n",
    "boltAnimf.play()\n",
    "boltAnim_m.play()\n",
    "boltAnim_mf.play()\n",
    "boltAnim_s.play()\n",
    "boltAnim_sf.play()\n",
    "boltAnim_bg.play()\n",
    "boltAnim_bgf.play()\n",
    "\n",
    "#Load audio\n",
    "hit = pygame.mixer.Sound(\"resources/audio/explode.wav\")\n",
    "enemy = pygame.mixer.Sound(\"resources/audio/enemy.wav\")\n",
    "shoot = pygame.mixer.Sound(\"resources/audio/shoot.wav\")\n",
    "laugh = pygame.mixer.Sound(\"resources/audio/laugh.wav\")\n",
    "robotvoice = pygame.mixer.Sound(\"resources/audio/robotvoice.wav\")\n",
    "countdown = pygame.mixer.Sound(\"resources/audio/countdown.wav\")\n",
    "launch = pygame.mixer.Sound(\"resources/audio/launch2.wav\")\n",
    "hit.set_volume(0.05)\n",
    "enemy.set_volume(0.03)\n",
    "shoot.set_volume(0.03)\n",
    "laugh.set_volume(0.05)\n",
    "robotvoice.set_volume(0.05)\n",
    "countdown.set_volume(0.09)\n",
    "launch.set_volume(0.07)\n",
    "pygame.mixer.music.load('resources/audio/moonlight.wav')\n",
    "pygame.mixer.music.play(-1, 0.0)\n",
    "pygame.mixer.music.set_volume(0.25)\n",
    "\n",
    "\n",
    "running = 1\n",
    "exitcode = 0\n",
    "while 1:\n",
    "    badtimer-=1\n",
    "    badtimer2-=1\n",
    "    \n",
    "    #clear the screen before drawing it again\n",
    "    screen.fill((0, 0, 0))\n",
    "    #draw the screen elements\n",
    "\n",
    "    for x in range(width//grass.get_width()+1):\n",
    "        for y in range(2):\n",
    "            screen.blit(grass,(x*100,(y+3)*100))\n",
    "            \n",
    "    for x in range(1):\n",
    "        for y in range(1):\n",
    "            screen.blit(sky,(x*100,(y)*100))\n",
    "  \n",
    "    if rocketlaunch == False:\n",
    "        screen.blit(rocket,(270,180))\n",
    "    else: \n",
    "        screen.blit(rocketl,(270,rocketypos))\n",
    "        \n",
    "    if player_move == \"MOVE_RIGHT\" and player_shoot == True:\n",
    "        boltAnim_s.blit(screen, playerpos)\n",
    "    elif player_move == \"MOVE_LEFT\" and player_shoot == True:\n",
    "        boltAnim_sf.blit(screen, playerpos)\n",
    "    elif  player_move == \"MOVE_LEFT\":\n",
    "        boltAnim_mf.blit(screen, playerpos)\n",
    "    elif player_move == \"MOVE_RIGHT\":\n",
    "        boltAnim_m.blit(screen, playerpos)\n",
    "    elif player_facing == \"RIGHT\" and player_shoot == True:\n",
    "        boltAnim_s.blit(screen, playerpos)\n",
    "    elif player_facing == \"LEFT\" and player_shoot == True:\n",
    "        boltAnim_sf.blit(screen, playerpos)\n",
    "    elif player_facing == \"RIGHT\":\n",
    "        boltAnim.blit(screen, playerpos)\n",
    "    elif player_facing == \"LEFT\":\n",
    "        boltAnimf.blit(screen, playerpos)\n",
    "    player_shoot\n",
    "     \n",
    "    #get player center point\n",
    "    playerpos1 = (playerpos[0]-80/2, playerpos[1]-95/2)\n",
    "\n",
    "\n",
    "    #Draw bullets\n",
    "    for bullet in laserbullets:\n",
    "        index=0\n",
    "        valx=math.cos(bullet[0])*8\n",
    "        #valy=math.sin(bullet[0])*10\n",
    "        bullet[1]+=valx\n",
    "        #bullet[2]+=valy\n",
    "        if bullet[1]<-64 or bullet[1]>640: #or bullet[2]<-64 or bullet[2]>480:\n",
    "            laserbullets.pop(index)\n",
    "        index+=1\n",
    "        for projectile in laserbullets:\n",
    "            if player_facing == \"LEFT\":\n",
    "                lbullet1 = pygame.transform.rotate(lbullet, 180)\n",
    "                screen.blit(lbullet1, (projectile[1]+40, projectile[2]+40))\n",
    "            else:    \n",
    "                screen.blit(lbullet, (projectile[1]+40, projectile[2]+40))\n",
    "\n",
    "                \n",
    "    #Draw robots on the right side\n",
    "    if badtimer==0:\n",
    "        badguys.append([680, 223])\n",
    "        badtimer=random.randint(101,badmaxtime)-(badtimer1*2)\n",
    "        if badtimer1>=50:\n",
    "            badtimer1=50\n",
    "            badmaxtime=300\n",
    "        else:\n",
    "            badtimer1+=4\n",
    "    index=0\n",
    "    for badguy in badguys:\n",
    "        if badguy[0]<-64:\n",
    "            badguys.pop(index)\n",
    "        badguy[0]-=random.uniform(0.5, 1.2)\n",
    "        \n",
    "        #check collide with rocket\n",
    "        badrect= pygame.Rect(badguy[0]+15,200,50,80)\n",
    "        badrect.top=badguy[1]\n",
    "        badrect.left=badguy[0]\n",
    "        rocketrect = pygame.Rect(rocket.get_rect())\n",
    "        rocketrect.top=180\n",
    "        rocketrect.left=307\n",
    "        rocketrect.width=20\n",
    "        if rocketlaunch == False:\n",
    "            if badrect.colliderect(rocketrect):\n",
    "                hit.play()\n",
    "                healthvalue -= random.randint(30,65)\n",
    "                badguys.pop(index)\n",
    "            \n",
    "        #check collide with bullets\n",
    "        index1=0\n",
    "        for bullet in laserbullets:\n",
    "            bullrect=pygame.Rect(lbullet.get_rect())\n",
    "            bullrect.left=bullet[1]+10\n",
    "            bullrect.top=bullet[2]+40\n",
    "            bullrect.width=30\n",
    "            bullrect.height=30\n",
    "            #pygame.draw.rect(screen, (100, 100, 255), bullrect,2)\n",
    "            if badrect.colliderect(bullrect):\n",
    "                enemy.play()\n",
    "                if random.randint(0,10) == 1:\n",
    "                    laugh.play()\n",
    "                acc[0]+=1\n",
    "                badguys.pop(index)\n",
    "                laserbullets.pop(index1)\n",
    "            index1+=1\n",
    "            \n",
    "        index+=1\n",
    "    for badguy in badguys:\n",
    "        boltAnim_bgf.blit(screen, badguy)\n",
    "    \n",
    "        \n",
    "    #Draw robots on the left side    \n",
    "    if badtimer2==0:\n",
    "        badguys2.append([-40, 223])\n",
    "        if random.randint(0,10) == 1:\n",
    "            robotvoice.play()\n",
    "        badtimer2=random.randint(101,badmaxtime2)-(badtimer12*2)\n",
    "        if badtimer12>=50:\n",
    "            badtimer12=50\n",
    "            badmaxtime2=250\n",
    "        else:\n",
    "            badtimer12+=2\n",
    "    index=0\n",
    "    for badguy2 in badguys2:\n",
    "        if badguy2[0]>680:\n",
    "            badguys2.pop(index)\n",
    "        badguy2[0]+=random.uniform(0.5, 1.2)\n",
    "        \n",
    "        #check collide with rocket\n",
    "        badrect2= pygame.Rect(badguy2[0]+15,200,50,80)\n",
    "        badrect2.top=badguy2[1]\n",
    "        badrect2.left=badguy2[0]\n",
    "        rocketrect = pygame.Rect(rocket.get_rect())\n",
    "        rocketrect.top=180\n",
    "        rocketrect.left=300\n",
    "        rocketrect.width=20\n",
    "        #pygame.draw.rect(screen, (100, 100, 255), rocketrect,2)\n",
    "        if rocketlaunch == False:\n",
    "            if badrect2.colliderect(rocketrect):\n",
    "                hit.play()\n",
    "                healthvalue -= random.randint(30,65)\n",
    "                badguys2.pop(index)\n",
    "        \n",
    "        #check collide with bullets\n",
    "        index1=0\n",
    "        for bullet in laserbullets:\n",
    "            bullrect=pygame.Rect(lbullet.get_rect())\n",
    "            bullrect.left=bullet[1]+65\n",
    "            bullrect.top=bullet[2]+40\n",
    "            bullrect.width=30\n",
    "            bullrect.height=30\n",
    "            if badrect2.colliderect(bullrect):\n",
    "                enemy.play()\n",
    "                acc[0]+=1\n",
    "                badguys2.pop(index)\n",
    "                laserbullets.pop(index1)\n",
    "            index1+=1\n",
    "            \n",
    "        index+=1\n",
    "    for badguy2 in badguys2:\n",
    "        boltAnim_bg.blit(screen, badguy2)\n",
    "        \n",
    "    #Draw timer\n",
    "    font = pygame.font.Font(None, 24)\n",
    "    survivedtext = font.render(str(int((67000-pygame.time.get_ticks())/60000))+\":\"+str(int((67000-pygame.time.get_ticks())/1000%60)).zfill(2), True, (0,0,0))\n",
    "    if (pygame.time.get_ticks()>64000 and pygame.time.get_ticks()<64100) and countdown1:\n",
    "        pygame.mixer.music.stop()\n",
    "        countdown1 = False\n",
    "        countdown.play()\n",
    "    if (pygame.time.get_ticks()>65000 and pygame.time.get_ticks()<65100) and countdown2:\n",
    "        countdown2 = False\n",
    "        countdown.play()\n",
    "    if (pygame.time.get_ticks()>66000 and pygame.time.get_ticks()<66100) and countdown3:\n",
    "        countdown3 = False\n",
    "        countdown.play()\n",
    "        \n",
    "    textRect = survivedtext.get_rect()\n",
    "    textRect.topright=[635,5]\n",
    "    screen.blit(survivedtext, textRect)\n",
    "   \n",
    "    #Draw healthbar\n",
    "    screen.blit(healthbar, (5,5))\n",
    "    for health1 in range(healthvalue):\n",
    "        screen.blit(health, (health1+8,8))\n",
    "        \n",
    "    \n",
    "\n",
    "    #update the screen\n",
    "    pygame.display.flip()\n",
    "    #loop through the events\n",
    "    for event in pygame.event.get():\n",
    "        #check if the event is the X button \n",
    "        if event.type==pygame.QUIT:\n",
    "            pygame.quit() \n",
    "            exit(0) \n",
    "        \n",
    "        #Check keyboard button pressed\n",
    "        if event.type == pygame.KEYDOWN:\n",
    "            if event.key==K_UP:\n",
    "                keys[0]=False\n",
    "            elif event.key==K_LEFT:\n",
    "                keys[1]=True\n",
    "                player_move = \"MOVE_LEFT\"\n",
    "                player_facing = \"LEFT\"\n",
    "            elif event.key==K_DOWN:\n",
    "                keys[2]=False\n",
    "            elif event.key==K_RIGHT:\n",
    "                keys[3]=True\n",
    "                player_move = \"MOVE_RIGHT\"\n",
    "                player_facing = \"RIGHT\"\n",
    "            elif event.key==K_x:\n",
    "                shoot.play()\n",
    "                acc[1]+=1\n",
    "                player_shoot = True\n",
    "                if player_facing == \"RIGHT\" or  player_move == \"MOVE_RIGHT\":\n",
    "                    laserbullets.append([0.0,playerpos1[0]+35,playerpos1[1]+32])\n",
    "                elif player_facing == \"LEFT\" or  player_move == \"MOVE_LEFT\":\n",
    "                    laserbullets.append([3.1324854372626767,playerpos1[0]+20,playerpos1[1]+32])\n",
    "        \n",
    "        #Check keyboard button released\n",
    "        if event.type == pygame.KEYUP:\n",
    "            if event.key==pygame.K_UP:\n",
    "                keys[0]=False\n",
    "            elif event.key==pygame.K_LEFT:\n",
    "                keys[1]=False       \n",
    "                player_move = \"\"\n",
    "            elif event.key==pygame.K_DOWN:\n",
    "                keys[2]=False\n",
    "            elif event.key==pygame.K_RIGHT:\n",
    "                keys[3]=False\n",
    "                \n",
    "                player_move = \"\"\n",
    "            elif event.key==pygame.K_x:\n",
    "                \n",
    "                keys[4]=False\n",
    "                player_shoot = False\n",
    "             \n",
    "    #Move player depending on keyboard keys pressed\n",
    "    if keys[0]:\n",
    "        playerpos[1]-=1 \n",
    "    elif keys[2]:\n",
    "        playerpos[1]+=1\n",
    "    if keys[1]:\n",
    "        playerpos[0]-=1\n",
    "    elif keys[3]:\n",
    "        playerpos[0]+=1\n",
    "\n",
    "    #Check winning or losing\n",
    "    if pygame.time.get_ticks()>=67000:\n",
    "        running=0\n",
    "        exitcode=1\n",
    "    if healthvalue<=0:\n",
    "        running=0\n",
    "        exitcode=0\n",
    "    if acc[1]!=0:\n",
    "        accuracy=int(acc[0]*1.0/acc[1]*100)\n",
    "    else:\n",
    "        accuracy=0\n",
    "        \n",
    "        \n",
    "    #losing display        \n",
    "    if exitcode == 0 and running==0:\n",
    "        pygame.font.init()\n",
    "        font = pygame.font.Font(None, 24)\n",
    "        text = font.render(\"Accuracy: \"+str(accuracy)+\"%\", True, (255,255,255))\n",
    "        textRect = text.get_rect()\n",
    "        textRect.centerx = screen.get_rect().centerx\n",
    "        textRect.centery = screen.get_rect().centery+24\n",
    "        screen.blit(gameover, (0,0))\n",
    "        screen.blit(text, textRect)\n",
    "        \n",
    "        while 1:\n",
    "            for event in pygame.event.get():\n",
    "                if event.type == pygame.QUIT:\n",
    "                    pygame.quit()\n",
    "                    exit(0)\n",
    "            pygame.display.flip()\n",
    "    #winning display      \n",
    "    if exitcode == 1 and running==0: \n",
    "        rocketlaunch = True\n",
    "        rocketypos -=0.5        \n",
    "        if rocketsound:\n",
    "            launch.play()\n",
    "            rocketsound = False\n",
    "        if rocketypos < 10:   \n",
    "            pygame.font.init()\n",
    "            font = pygame.font.Font(None, 24)\n",
    "            text = font.render(\"Accuracy: \"+str(accuracy)+\"%\", True, (255,255,255))\n",
    "            textRect = text.get_rect()\n",
    "            textRect.centerx = screen.get_rect().centerx\n",
    "            textRect.centery = screen.get_rect().centery+24\n",
    "            screen.blit(youwin, (0,0))\n",
    "            screen.blit(text, textRect)\n",
    "\n",
    "            while 1:\n",
    "                for event in pygame.event.get():\n",
    "                    if event.type == pygame.QUIT:\n",
    "                        pygame.quit()\n",
    "                        exit(0)\n",
    "                pygame.display.flip()\n",
    "\n",
    "\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
